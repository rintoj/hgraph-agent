name: Release

on:
  push:
    branches: [main, fix-release-script]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Setup Node.js for npm publishing
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install dependencies
        run: bun install

      - name: Run lint
        run: bun run lint

      - name: Build
        run: bun run build

      - name: Determine version bump
        id: version
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            echo "No previous tags found, checking all commits"
            COMMITS=$(git log --pretty=format:"%s")
          else
            echo "Last tag: $LAST_TAG"
            COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"%s")
          fi
          
          echo "Commits to analyze:"
          echo "$COMMITS"
          
          # Check for minor version keywords
          if echo "$COMMITS" | grep -iE "^(feat|feature)(\(.+\))?:" > /dev/null; then
            VERSION_BUMP="minor"
          # Check for patch version keywords  
          elif echo "$COMMITS" | grep -iE "^(fix|bugfix|patch|chore|docs|style|refactor|perf|test|build|ci)(\(.+\))?:" > /dev/null; then
            VERSION_BUMP="patch"
          # Default to patch if no conventional commits found
          else
            VERSION_BUMP="patch"
          fi
          
          echo "Version bump type: $VERSION_BUMP"
          echo "bump=$VERSION_BUMP" >> $GITHUB_OUTPUT

      - name: Bump version
        id: bump
        run: |
          npm version ${{ steps.version.outputs.bump }} --no-git-tag-version
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "New version: $VERSION"

      - name: Commit version bump
        run: |
          git add package.json bun.lock
          git commit -m "chore: release v${{ steps.bump.outputs.version }}"
          git tag -a "v${{ steps.bump.outputs.version }}" -m "Release v${{ steps.bump.outputs.version }}"

      - name: Push changes
        run: |
          git push origin ${{ github.ref_name }}
          git push origin "v${{ steps.bump.outputs.version }}"

      - name: Publish to npm
        run: npm publish --access public --registry https://registry.npmjs.org/
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Generate release notes
        id: release_notes
        run: |
          # Get commits since last tag for release notes
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s" HEAD)
          else
            COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"- %s")
          fi
          
          # Create release notes
          cat << EOF > release_notes.md
          ## What's Changed
          
          $COMMITS
          
          **Full Changelog**: ${LAST_TAG}...v${{ steps.bump.outputs.version }}
          EOF
          
          echo "Release notes generated"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.bump.outputs.version }}
          name: Release v${{ steps.bump.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}